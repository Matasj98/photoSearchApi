{"ast":null,"code":"var _jsxFileName = \"/home/matas/Documents/mediapark task/my-app/src/App.js\";\nimport React from 'react';\nimport './App.scss';\nimport axios from 'axios';\nimport Search from './Components/Search/search.component';\nimport Image from './Components/Image/image.component';\nimport { connect } from 'react-redux';\nimport { addQuery } from './Actions/action';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.getUnsplashImage = item => {\n      axios.get('https://api.unsplash.com/search/photos', {\n        params: {\n          query: item\n        },\n        headers: {\n          Authorization: 'Client-ID c2c1213b2926687ccb49f712386ddba8815b841153dd247b26b4de79efea9fea'\n        }\n      }).then(res => this.setState({\n        imageData: res.data.results\n      })).catch(err => console.log(err));\n    };\n\n    this.saveQuery = item => {\n      this.props.onAddQuery(item);\n    };\n\n    this.state = {\n      imageData: null\n    };\n  }\n\n  render() {\n    const imageData = this.state.imageData;\n    let imageContainer = React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \"Search For Images\");\n\n    if (imageData !== null) {\n      imageContainer = imageData.map(image => React.createElement(Image, {\n        key: image.id,\n        imageId: image.urls.full,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }));\n\n      if (imageData.length === 0) {\n        imageContainer = React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        }, \"No Images Found\");\n      }\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(Search, {\n      search: this.getUnsplashImage,\n      save: this.saveQuery,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: imageData === null ? null : imageData.length === 0 ? null : \"imageGrid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, imageContainer), React.createElement(\"div\", {\n      className: \"savedQueries\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"Saved Queries\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, this.props.savedQueries.map((name, index) => React.createElement(\"li\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, name))))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  savedQueries: state.savedQueries.queries\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onAddQuery: name => dispatch(addQuery(name))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/home/matas/Documents/mediapark task/my-app/src/App.js"],"names":["React","axios","Search","Image","connect","addQuery","App","Component","constructor","getUnsplashImage","item","get","params","query","headers","Authorization","then","res","setState","imageData","data","results","catch","err","console","log","saveQuery","props","onAddQuery","state","render","imageContainer","map","image","id","urls","full","length","savedQueries","name","index","mapStateToProps","queries","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,YAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,sCAAnB;AACA,OAAOC,KAAP,MAAkB,oCAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,kBAAzB;;AAEA,MAAMC,GAAN,SAAkBN,KAAK,CAACO,SAAxB,CAAkC;AAEhCC,EAAAA,WAAW,GAAG;AACZ;;AADY,SAQdC,gBARc,GAQKC,IAAI,IAAI;AACzBT,MAAAA,KAAK,CAACU,GAAN,CAAU,wCAAV,EAAoD;AAClDC,QAAAA,MAAM,EAAE;AAAEC,UAAAA,KAAK,EAAEH;AAAT,SAD0C;AAElDI,QAAAA,OAAO,EAAE;AACPC,UAAAA,aAAa,EAAE;AADR;AAFyC,OAApD,EAKGC,IALH,CAKQC,GAAG,IAAI,KAAKC,QAAL,CAAc;AAAEC,QAAAA,SAAS,EAAEF,GAAG,CAACG,IAAJ,CAASC;AAAtB,OAAd,CALf,EAMEC,KANF,CAMQC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CANf;AAOD,KAhBa;;AAAA,SAkBdG,SAlBc,GAkBFhB,IAAI,IAAI;AAClB,WAAKiB,KAAL,CAAWC,UAAX,CAAsBlB,IAAtB;AACD,KApBa;;AAGZ,SAAKmB,KAAL,GAAa;AACXV,MAAAA,SAAS,EAAE;AADA,KAAb;AAGD;;AAgBDW,EAAAA,MAAM,GAAG;AAAA,UACCX,SADD,GACe,KAAKU,KADpB,CACCV,SADD;AAGP,QAAIY,cAAc,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAArB;;AACA,QAAIZ,SAAS,KAAK,IAAlB,EAAwB;AACtBY,MAAAA,cAAc,GAAGZ,SAAS,CAACa,GAAV,CAAcC,KAAK,IAAI,oBAAC,KAAD;AAAO,QAAA,GAAG,EAAEA,KAAK,CAACC,EAAlB;AAAsB,QAAA,OAAO,EAAED,KAAK,CAACE,IAAN,CAAWC,IAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAvB,CAAjB;;AACA,UAAIjB,SAAS,CAACkB,MAAV,KAAqB,CAAzB,EAA4B;AAC1BN,QAAAA,cAAc,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAjB;AACD;AACF;;AAED,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAQ,MAAA,MAAM,EAAE,KAAKtB,gBAArB;AAAuC,MAAA,IAAI,EAAE,KAAKiB,SAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAEP,SAAS,KAAK,IAAd,GAAqB,IAArB,GAA4BA,SAAS,CAACkB,MAAV,KAAqB,CAArB,GAAyB,IAAzB,GAAgC,WAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0FN,cAA1F,CADF,EAEE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKJ,KAAL,CAAWW,YAAX,CAAwBN,GAAxB,CAA4B,CAACO,IAAD,EAAOC,KAAP,KAAiB;AAAI,MAAA,GAAG,EAAEA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiBD,IAAjB,CAA7C,CADH,CAFF,CAFF,CAFF,CADF;AAeD;;AAlD+B;;AAqDlC,MAAME,eAAe,GAAGZ,KAAK,KAAK;AAChCS,EAAAA,YAAY,EAAET,KAAK,CAACS,YAAN,CAAmBI;AADD,CAAL,CAA7B;;AAIA,MAAMC,kBAAkB,GAAGC,QAAQ,KAAK;AACtChB,EAAAA,UAAU,EAAEW,IAAI,IAAIK,QAAQ,CAACvC,QAAQ,CAACkC,IAAD,CAAT;AADU,CAAL,CAAnC;;AAIA,eAAenC,OAAO,CAACqC,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CrC,GAA7C,CAAf","sourcesContent":["import React from 'react';\nimport './App.scss';\nimport axios from 'axios';\nimport Search from './Components/Search/search.component';\nimport Image from './Components/Image/image.component';\nimport { connect } from 'react-redux';\nimport { addQuery } from './Actions/action';\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      imageData: null\n    }\n  }\n\n  getUnsplashImage = item => {\n    axios.get('https://api.unsplash.com/search/photos', {\n      params: { query: item },\n      headers: {\n        Authorization: 'Client-ID c2c1213b2926687ccb49f712386ddba8815b841153dd247b26b4de79efea9fea'\n      }\n    }).then(res => this.setState({ imageData: res.data.results })\n    ).catch(err => console.log(err))\n  }\n\n  saveQuery = item => {\n    this.props.onAddQuery(item);\n  }\n\n  render() {\n    const { imageData } = this.state;\n\n    let imageContainer = <h1>Search For Images</h1>;\n    if (imageData !== null) {\n      imageContainer = imageData.map(image => <Image key={image.id} imageId={image.urls.full} />)\n      if (imageData.length === 0) {\n        imageContainer = <h1>No Images Found</h1>\n      }\n    }\n\n    return (\n      <div>\n        <Search search={this.getUnsplashImage} save={this.saveQuery}/>\n        <div className=\"content\">\n          <div className={imageData === null ? null : imageData.length === 0 ? null : \"imageGrid\"}>{imageContainer}</div>\n          <div className=\"savedQueries\">\n            <h1>Saved Queries</h1>\n            <ul>\n              {this.props.savedQueries.map((name, index) => <li key={index}>{name}</li>)}\n            </ul>\n          </div>\n        </div>\n        {/* {console.log(this.props.savedQueries)} */}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  savedQueries: state.savedQueries.queries\n})\n\nconst mapDispatchToProps = dispatch => ({\n  onAddQuery: name => dispatch(addQuery(name))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}