{"version":3,"sources":["Components/Search/search.component.js","Thunk/saveQuery.js","Actions/action.js","Components/Image/image.component.js","Components/SavedQueries/savedQueries.component.js","Thunk/removeQuery.js","App.js","Reducers/savedQueries.js","Reducers/index.js","index.js"],"names":["Search","setSearchText","e","setState","searchText","target","value","saveQuery","state","length","props","onAddQuery","alert","className","type","placeholder","onChange","onClick","search","this","React","Component","connect","dispatch","name","getState","copy","savedQueries","queries","push","window","localStorage","setItem","JSON","stringify","query","Image","loading","loader","alt","src","imageId","onLoad","SavedQueries","map","index","key","onRemoveQuery","indexOf","splice","parse","getItem","removeQuery","App","getUnsplashImage","item","axios","get","params","headers","Authorization","then","res","imageData","data","results","catch","err","console","log","onLoadQuery","imageContainer","image","id","urls","full","loadQuery","initialState","allReducer","combineReducers","action","store","createStore","applyMiddleware","Thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.35e631a2.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./search.style.scss\";\nimport { connect } from \"react-redux\";\nimport { saveQuery } from \"../../Thunk/saveQuery\";\n\nclass Search extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      searchText: \"\"\n    };\n  }\n\n  setSearchText = e => {\n    this.setState({ searchText: e.target.value });\n  };\n\n  saveQuery = () => {\n    if (this.state.searchText.length !== 0) {\n      this.props.onAddQuery(this.state.searchText);\n    } else {\n      alert(`Input field is empty`);\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"search\">\n        <input\n          type=\"text\"\n          placeholder=\"Search for images\"\n          onChange={e => this.setSearchText(e)}\n        />\n        <div>\n          <button onClick={() => this.props.search(this.state.searchText)}>\n            Search\n          </button>\n          <button onClick={this.saveQuery}>Save</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  onAddQuery: name => dispatch(saveQuery(name))\n});\n\nexport default connect(null, mapDispatchToProps)(Search);\n","import { addQuery } from \"../Actions/action\";\n\nexport const saveQuery = name => (dispatch, getState) => {\n  let copy = [...getState().savedQueries.queries];\n  copy.push(name);\n  window.localStorage.setItem(\"query\", JSON.stringify(copy));\n  dispatch(addQuery(copy));\n};\n","export const addQuery = query => ({\n  type: \"addQuery\",\n  query\n});\n\nexport const changedQuery = query => ({\n  type: \"changedQuery\",\n  query\n});\n\nexport const loadQuery = query => ({\n  type: \"loadQuery\",\n  query\n});\n","import React from \"react\";\nimport \"./image.style.scss\";\nimport \"../../Assets/LoadingSpiner/spiner.style.scss\";\n\nclass Image extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      loading: true\n    };\n  }\n  render() {\n    const loader = (\n      <div className=\"spinner\">\n        <div className=\"bounce1\"></div>\n        <div className=\"bounce2\"></div>\n        <div className=\"bounce3\"></div>\n      </div>\n    );\n\n    return (\n      <div className=\"image\">\n        <img\n          alt=\"lala\"\n          src={this.props.imageId}\n          onLoad={() => this.setState({ loading: false })}\n        />\n        {this.state.loading ? loader : null}\n      </div>\n    );\n  }\n}\n\nexport default Image;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./savedQueries.scss\";\nimport { removeQuery } from \"../../Thunk/removeQuery\";\n\nclass SavedQueries extends React.Component {\n  render() {\n    return (\n      <div className=\"savedQueries\">\n        <h1>Saved Queries</h1>\n        <ul>\n          {this.props.savedQueries.map((name, index) => (\n            <div className=\"u-flexSpaceBetween\" key={index}>\n              <li onClick={() => this.props.search(name)}>{name}</li>\n              <button onClick={() => this.props.onRemoveQuery(name)}>\n                Delete\n              </button>\n            </div>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  savedQueries: state.savedQueries.queries\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onRemoveQuery: name => dispatch(removeQuery(name))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SavedQueries);\n","import { changedQuery } from \"../Actions/action\";\n\nexport const removeQuery = name => (dispatch, getState) => {\n  const copy = [...getState().savedQueries.queries];\n  const index = copy.indexOf(name);\n  copy.splice(index, 1);JSON.parse(window.localStorage.getItem(\"query\"))\n  window.localStorage.setItem(\"query\", JSON.stringify(copy));\n  dispatch(changedQuery(copy));\n};\n","import React from \"react\";\nimport \"./App.scss\";\nimport axios from \"axios\";\nimport Search from \"./Components/Search/search.component\";\nimport Image from \"./Components/Image/image.component\";\nimport SavedQueries from \"./Components/SavedQueries/savedQueries.component\";\nimport { loadQuery } from \"./Actions/action\";\nimport { connect } from \"react-redux\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      imageData: null\n    };\n  }\n\n  componentDidMount() {\n    if (window.localStorage.getItem(\"query\") !== null) {\n      this.props.onLoadQuery(JSON.parse(window.localStorage.getItem(\"query\")));\n    }\n  }\n\n  getUnsplashImage = item => {\n    axios\n      .get(\"https://api.unsplash.com/search/photos\", {\n        params: { query: item },\n        headers: {\n          Authorization:\n            \"Client-ID c2c1213b2926687ccb49f712386ddba8815b841153dd247b26b4de79efea9fea\"\n        }\n      })\n      .then(res => this.setState({ imageData: res.data.results }))\n      .catch(err => console.log(err));\n  };\n\n  render() {\n    const { imageData } = this.state;\n\n    let imageContainer = <h1>Search For Images</h1>;\n    if (imageData !== null) {\n      imageContainer = imageData.map(image => (\n        <Image key={image.id} imageId={image.urls.full} />\n      ));\n      if (imageData.length === 0) {\n        imageContainer = <h1>No Images Found</h1>;\n      }\n    }\n\n    return (\n      <div>\n        <Search search={this.getUnsplashImage} />\n        <div className=\"content\">\n          <div\n            className={\n              imageData === null\n                ? null\n                : imageData.length === 0\n                ? null\n                : \"imageGrid\"\n            }\n          >\n            {imageContainer}\n          </div>\n          <SavedQueries search={this.getUnsplashImage} />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  onLoadQuery: query => dispatch(loadQuery(query))\n});\n\nexport default connect(null, mapDispatchToProps)(App);\n","const initialState = {\n  queries: []\n};\n\nexport const savedQueries = (state = initialState, action) => {\n  switch (action.type) {\n    case \"addQuery\":\n      return {\n        ...state,\n        queries: action.query\n      };\n    case \"changedQuery\":\n      return {\n        ...state,\n        queries: action.query\n      };\n    case \"loadQuery\":\n      return {\n        ...state,\n        queries: action.query\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport { savedQueries } from \"./savedQueries\";\n\nexport const allReducer = combineReducers({\n  savedQueries\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport Thunk from \"redux-thunk\";\nimport { allReducer } from \"./Reducers\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\n\nconst store = createStore(allReducer, applyMiddleware(Thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}